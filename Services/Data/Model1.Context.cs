//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities2 : DbContext
    {
        public Entities2()
            : base("name=Entities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Aukcije> Aukcije { get; set; }
        public DbSet<Dobavljaci> Dobavljaci { get; set; }
        public DbSet<Igre> Igre { get; set; }
        public DbSet<Izdavaci> Izdavaci { get; set; }
        public DbSet<Izlazi> Izlazi { get; set; }
        public DbSet<IzlazStavke> IzlazStavke { get; set; }
        public DbSet<Korisnici> Korisnici { get; set; }
        public DbSet<KorisniciUloge> KorisniciUloge { get; set; }
        public DbSet<Kupci> Kupci { get; set; }
        public DbSet<Narudzbe> Narudzbe { get; set; }
        public DbSet<NarudzbeStavke> NarudzbeStavke { get; set; }
        public DbSet<Ocjene> Ocjene { get; set; }
        public DbSet<Recenzije> Recenzije { get; set; }
        public DbSet<Skladista> Skladista { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Ulaz> Ulaz { get; set; }
        public DbSet<UlazStavke> UlazStavke { get; set; }
        public DbSet<Uloge> Uloge { get; set; }
        public DbSet<Vrsta> Vrsta { get; set; }
        public DbSet<Zahtjevi> Zahtjevi { get; set; }
        public DbSet<ZahtjeviKupci> ZahtjeviKupci { get; set; }
        public DbSet<AukcijaPonuda> AukcijaPonuda { get; set; }
    
        public virtual ObjectResult<Aukcije> AukcSelectByID(Nullable<int> aukcijaID)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aukcije>("AukcSelectByID", aukcijaIDParameter);
        }
    
        public virtual ObjectResult<Aukcije> AukcSelectByID(Nullable<int> aukcijaID, MergeOption mergeOption)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aukcije>("AukcSelectByID", mergeOption, aukcijaIDParameter);
        }
    
        public virtual int DeleteKOrisnici(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKOrisnici", korisnikIDParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> DobavljaciSelectByID(Nullable<int> dobavljacID)
        {
            var dobavljacIDParameter = dobavljacID.HasValue ?
                new ObjectParameter("DobavljacID", dobavljacID) :
                new ObjectParameter("DobavljacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("DobavljaciSelectByID", dobavljacIDParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> DobavljaciSelectByID(Nullable<int> dobavljacID, MergeOption mergeOption)
        {
            var dobavljacIDParameter = dobavljacID.HasValue ?
                new ObjectParameter("DobavljacID", dobavljacID) :
                new ObjectParameter("DobavljacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("DobavljaciSelectByID", mergeOption, dobavljacIDParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> DobavljaciSelectByNaziv(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("DobavljaciSelectByNaziv", nazivParameter);
        }
    
        public virtual ObjectResult<Dobavljaci> DobavljaciSelectByNaziv(string naziv, MergeOption mergeOption)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dobavljaci>("DobavljaciSelectByNaziv", mergeOption, nazivParameter);
        }
    
        public virtual int dodajIzdavaca(string ime)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dodajIzdavaca", imeParameter);
        }
    
        public virtual int dodajVrstu(string naziv)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dodajVrstu", nazivParameter);
        }
    
        public virtual ObjectResult<GetAllDobavljaci_Result> GetAllDobavljaci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDobavljaci_Result>("GetAllDobavljaci");
        }
    
        public virtual ObjectResult<Skladista> GetAllSkladista()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skladista>("GetAllSkladista");
        }
    
        public virtual ObjectResult<Skladista> GetAllSkladista(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Skladista>("GetAllSkladista", mergeOption);
        }
    
        public virtual ObjectResult<Izdavaci> GETIzdavaci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Izdavaci>("GETIzdavaci");
        }
    
        public virtual ObjectResult<Izdavaci> GETIzdavaci(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Izdavaci>("GETIzdavaci", mergeOption);
        }
    
        public virtual ObjectResult<Vrsta> GetVrstaALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vrsta>("GetVrstaALL");
        }
    
        public virtual ObjectResult<Vrsta> GetVrstaALL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vrsta>("GetVrstaALL", mergeOption);
        }
    
        public virtual ObjectResult<Igre> IgreSelectByID(Nullable<int> igraID)
        {
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("IgreSelectByID", igraIDParameter);
        }
    
        public virtual ObjectResult<Igre> IgreSelectByID(Nullable<int> igraID, MergeOption mergeOption)
        {
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("IgreSelectByID", mergeOption, igraIDParameter);
        }
    
        public virtual ObjectResult<Igre> IgreSelectBySifra(string sifra)
        {
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("IgreSelectBySifra", sifraParameter);
        }
    
        public virtual ObjectResult<Igre> IgreSelectBySifra(string sifra, MergeOption mergeOption)
        {
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("IgreSelectBySifra", mergeOption, sifraParameter);
        }
    
        public virtual ObjectResult<IgreSelectBySkladiste_Result> IgreSelectBySkladiste(Nullable<int> skladisteID)
        {
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IgreSelectBySkladiste_Result>("IgreSelectBySkladiste", skladisteIDParameter);
        }
    
        public virtual ObjectResult<IgreSelectByVrstaNaziv_Result> IgreSelectByVrstaNaziv(Nullable<int> vrstaID, string naziv, Nullable<int> offset, Nullable<int> maxRows, ObjectParameter totalRows)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var maxRowsParameter = maxRows.HasValue ?
                new ObjectParameter("MaxRows", maxRows) :
                new ObjectParameter("MaxRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IgreSelectByVrstaNaziv_Result>("IgreSelectByVrstaNaziv", vrstaIDParameter, nazivParameter, offsetParameter, maxRowsParameter, totalRows);
        }
    
        public virtual int InsertAukcije(Nullable<System.DateTime> datumOD, Nullable<System.DateTime> datumDO, Nullable<int> korisnikID, Nullable<int> igraID)
        {
            var datumODParameter = datumOD.HasValue ?
                new ObjectParameter("DatumOD", datumOD) :
                new ObjectParameter("DatumOD", typeof(System.DateTime));
    
            var datumDOParameter = datumDO.HasValue ?
                new ObjectParameter("DatumDO", datumDO) :
                new ObjectParameter("DatumDO", typeof(System.DateTime));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAukcije", datumODParameter, datumDOParameter, korisnikIDParameter, igraIDParameter);
        }
    
        public virtual int InsertDobavljaci(string naziv, string adresa, string kontaktOsoba, string telefon, string email, string ziroRacun, Nullable<bool> status)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            var kontaktOsobaParameter = kontaktOsoba != null ?
                new ObjectParameter("KontaktOsoba", kontaktOsoba) :
                new ObjectParameter("KontaktOsoba", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var ziroRacunParameter = ziroRacun != null ?
                new ObjectParameter("ZiroRacun", ziroRacun) :
                new ObjectParameter("ZiroRacun", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDobavljaci", nazivParameter, adresaParameter, kontaktOsobaParameter, telefonParameter, emailParameter, ziroRacunParameter, statusParameter);
        }
    
        public virtual int InsertIgre(string naziv, string datumIzdavanja, Nullable<int> izdavacID, Nullable<decimal> cijena, byte[] slika, string trailer, string opis, Nullable<int> vrstaID, byte[] slikaThumb, string sifra)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var datumIzdavanjaParameter = datumIzdavanja != null ?
                new ObjectParameter("DatumIzdavanja", datumIzdavanja) :
                new ObjectParameter("DatumIzdavanja", typeof(string));
    
            var izdavacIDParameter = izdavacID.HasValue ?
                new ObjectParameter("IzdavacID", izdavacID) :
                new ObjectParameter("IzdavacID", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var slikaParameter = slika != null ?
                new ObjectParameter("Slika", slika) :
                new ObjectParameter("Slika", typeof(byte[]));
    
            var trailerParameter = trailer != null ?
                new ObjectParameter("Trailer", trailer) :
                new ObjectParameter("Trailer", typeof(string));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            var slikaThumbParameter = slikaThumb != null ?
                new ObjectParameter("SlikaThumb", slikaThumb) :
                new ObjectParameter("SlikaThumb", typeof(byte[]));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIgre", nazivParameter, datumIzdavanjaParameter, izdavacIDParameter, cijenaParameter, slikaParameter, trailerParameter, opisParameter, vrstaIDParameter, slikaThumbParameter, sifraParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertOcjene(Nullable<int> kupacID, Nullable<int> igraID, Nullable<System.DateTime> datum, Nullable<int> ocjena)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var ocjenaParameter = ocjena.HasValue ?
                new ObjectParameter("Ocjena", ocjena) :
                new ObjectParameter("Ocjena", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertOcjene", kupacIDParameter, igraIDParameter, datumParameter, ocjenaParameter);
        }
    
        public virtual int INSERTRECENZIJA(Nullable<int> igraID, Nullable<System.DateTime> datum, string sadrzaj, Nullable<int> korisnikID)
        {
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var sadrzajParameter = sadrzaj != null ?
                new ObjectParameter("Sadrzaj", sadrzaj) :
                new ObjectParameter("Sadrzaj", typeof(string));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTRECENZIJA", igraIDParameter, datumParameter, sadrzajParameter, korisnikIDParameter);
        }
    
        public virtual int InsertSkladista(string naziv, string adresa)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSkladista", nazivParameter, adresaParameter);
        }
    
        public virtual int IzlaziStavkeInsert(Nullable<int> izlazID, Nullable<int> proizvodID, Nullable<int> kolicina, Nullable<decimal> cijena, Nullable<decimal> popust)
        {
            var izlazIDParameter = izlazID.HasValue ?
                new ObjectParameter("IzlazID", izlazID) :
                new ObjectParameter("IzlazID", typeof(int));
    
            var proizvodIDParameter = proizvodID.HasValue ?
                new ObjectParameter("ProizvodID", proizvodID) :
                new ObjectParameter("ProizvodID", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            var popustParameter = popust.HasValue ?
                new ObjectParameter("Popust", popust) :
                new ObjectParameter("Popust", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IzlaziStavkeInsert", izlazIDParameter, proizvodIDParameter, kolicinaParameter, cijenaParameter, popustParameter);
        }
    
        public virtual int IzlazRobeInsert(string brojRacuna, Nullable<System.DateTime> datum, Nullable<int> kupacID, Nullable<bool> zakljucen, Nullable<decimal> iznosBezPDv, Nullable<decimal> iznosSaPDv, Nullable<int> narudzbaID, Nullable<int> skladisteID)
        {
            var brojRacunaParameter = brojRacuna != null ?
                new ObjectParameter("BrojRacuna", brojRacuna) :
                new ObjectParameter("BrojRacuna", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var zakljucenParameter = zakljucen.HasValue ?
                new ObjectParameter("Zakljucen", zakljucen) :
                new ObjectParameter("Zakljucen", typeof(bool));
    
            var iznosBezPDvParameter = iznosBezPDv.HasValue ?
                new ObjectParameter("IznosBezPDv", iznosBezPDv) :
                new ObjectParameter("IznosBezPDv", typeof(decimal));
    
            var iznosSaPDvParameter = iznosSaPDv.HasValue ?
                new ObjectParameter("IznosSaPDv", iznosSaPDv) :
                new ObjectParameter("IznosSaPDv", typeof(decimal));
    
            var narudzbaIDParameter = narudzbaID.HasValue ?
                new ObjectParameter("NarudzbaID", narudzbaID) :
                new ObjectParameter("NarudzbaID", typeof(int));
    
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IzlazRobeInsert", brojRacunaParameter, datumParameter, kupacIDParameter, zakljucenParameter, iznosBezPDvParameter, iznosSaPDvParameter, narudzbaIDParameter, skladisteIDParameter);
        }
    
        public virtual ObjectResult<IzlazSelectByDatum_Result> IzlazSelectByDatum(Nullable<System.DateTime> datumOd, Nullable<System.DateTime> datumDo)
        {
            var datumOdParameter = datumOd.HasValue ?
                new ObjectParameter("DatumOd", datumOd) :
                new ObjectParameter("DatumOd", typeof(System.DateTime));
    
            var datumDoParameter = datumDo.HasValue ?
                new ObjectParameter("DatumDo", datumDo) :
                new ObjectParameter("DatumDo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IzlazSelectByDatum_Result>("IzlazSelectByDatum", datumOdParameter, datumDoParameter);
        }
    
        public virtual ObjectResult<Korisnici> Korisnici_Select_By_KorisnickoIme(string korisnickoIme)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("korisnickoIme", korisnickoIme) :
                new ObjectParameter("korisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("Korisnici_Select_By_KorisnickoIme", korisnickoImeParameter);
        }
    
        public virtual ObjectResult<Korisnici> Korisnici_Select_By_KorisnickoIme(string korisnickoIme, MergeOption mergeOption)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("korisnickoIme", korisnickoIme) :
                new ObjectParameter("korisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("Korisnici_Select_By_KorisnickoIme", mergeOption, korisnickoImeParameter);
        }
    
        public virtual ObjectResult<Uloge> Korisnici_Uloge_SelectByKorisnik(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("Korisnici_Uloge_SelectByKorisnik", korisnikIDParameter);
        }
    
        public virtual ObjectResult<Uloge> Korisnici_Uloge_SelectByKorisnik(Nullable<int> korisnikID, MergeOption mergeOption)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("Korisnici_Uloge_SelectByKorisnik", mergeOption, korisnikIDParameter);
        }
    
        public virtual int KorisniciChangePassword(Nullable<int> korisnikID, string lozinkaSalt, string lozinkaHash)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KorisniciChangePassword", korisnikIDParameter, lozinkaSaltParameter, lozinkaHashParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> KorisniciInsert(string ime, string prezime, string email, string telefon, string korisnickoIme, string lozinkaHash, string lozinkaSalt)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("KorisniciInsert", imeParameter, prezimeParameter, emailParameter, telefonParameter, korisnickoImeParameter, lozinkaHashParameter, lozinkaSaltParameter);
        }
    
        public virtual int KorisniciIUlogeInsert(Nullable<int> korisnikID, Nullable<int> ulogaID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var ulogaIDParameter = ulogaID.HasValue ?
                new ObjectParameter("UlogaID", ulogaID) :
                new ObjectParameter("UlogaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KorisniciIUlogeInsert", korisnikIDParameter, ulogaIDParameter);
        }
    
        public virtual ObjectResult<KorisniciSelectByNameSearch_Result> KorisniciSelectByNameSearch(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KorisniciSelectByNameSearch_Result>("KorisniciSelectByNameSearch", nameParameter);
        }
    
        public virtual ObjectResult<Korisnici> KorisniciSelektById(Nullable<int> korisnikId)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("KorisniciSelektById", korisnikIdParameter);
        }
    
        public virtual ObjectResult<Korisnici> KorisniciSelektById(Nullable<int> korisnikId, MergeOption mergeOption)
        {
            var korisnikIdParameter = korisnikId.HasValue ?
                new ObjectParameter("KorisnikId", korisnikId) :
                new ObjectParameter("KorisnikId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Korisnici>("KorisniciSelektById", mergeOption, korisnikIdParameter);
        }
    
        public virtual int KorisniciUlogeDelete(Nullable<int> korisnikID)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KorisniciUlogeDelete", korisnikIDParameter);
        }
    
        public virtual int KorisniciUpdateStatus(Nullable<int> korisnikID, Nullable<bool> status)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KorisniciUpdateStatus", korisnikIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<KUPACSELECTBYKORISNICKOIME_Result> KUPACSELECTBYKORISNICKOIME(string korisnickoIme)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KUPACSELECTBYKORISNICKOIME_Result>("KUPACSELECTBYKORISNICKOIME", korisnickoImeParameter);
        }
    
        public virtual int KupciInsert(string ime, string prezime, Nullable<System.DateTime> datum, string email, string korisnickoIme, string lozinkaHash, string lozinkaSalt)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("Ime", ime) :
                new ObjectParameter("Ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("Prezime", prezime) :
                new ObjectParameter("Prezime", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            var lozinkaHashParameter = lozinkaHash != null ?
                new ObjectParameter("LozinkaHash", lozinkaHash) :
                new ObjectParameter("LozinkaHash", typeof(string));
    
            var lozinkaSaltParameter = lozinkaSalt != null ?
                new ObjectParameter("LozinkaSalt", lozinkaSalt) :
                new ObjectParameter("LozinkaSalt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("KupciInsert", imeParameter, prezimeParameter, datumParameter, emailParameter, korisnickoImeParameter, lozinkaHashParameter, lozinkaSaltParameter);
        }
    
        public virtual ObjectResult<Kupci> KupciSelectByKorisnickoIme(string korisnickoIme)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("KupciSelectByKorisnickoIme", korisnickoImeParameter);
        }
    
        public virtual ObjectResult<Kupci> KupciSelectByKorisnickoIme(string korisnickoIme, MergeOption mergeOption)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("KorisnickoIme", korisnickoIme) :
                new ObjectParameter("KorisnickoIme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Kupci>("KupciSelectByKorisnickoIme", mergeOption, korisnickoImeParameter);
        }
    
        public virtual ObjectResult<SearchRecenzije_Result> SearchRecenzije(string naslov)
        {
            var naslovParameter = naslov != null ?
                new ObjectParameter("Naslov", naslov) :
                new ObjectParameter("Naslov", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRecenzije_Result>("SearchRecenzije", naslovParameter);
        }
    
        public virtual ObjectResult<SelectAktivneNarudb_Result> SelectAktivneNarudb()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAktivneNarudb_Result>("SelectAktivneNarudb");
        }
    
        public virtual ObjectResult<SELECTALLZAHTJEVI_Result> SELECTALLZAHTJEVI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTALLZAHTJEVI_Result>("SELECTALLZAHTJEVI");
        }
    
        public virtual int SELECTAUKCIJABYID(Nullable<int> aukcijaID)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SELECTAUKCIJABYID", aukcijaIDParameter);
        }
    
        public virtual ObjectResult<SelectAukcije_Result> SelectAukcije()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAukcije_Result>("SelectAukcije");
        }
    
        public virtual ObjectResult<Igre> SelectIgreAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("SelectIgreAll");
        }
    
        public virtual ObjectResult<Igre> SelectIgreAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Igre>("SelectIgreAll", mergeOption);
        }
    
        public virtual ObjectResult<SelectIgreByNarudzbaID_Result> SelectIgreByNarudzbaID(Nullable<int> narudbaID)
        {
            var narudbaIDParameter = narudbaID.HasValue ?
                new ObjectParameter("NarudbaID", narudbaID) :
                new ObjectParameter("NarudbaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectIgreByNarudzbaID_Result>("SelectIgreByNarudzbaID", narudbaIDParameter);
        }
    
        public virtual ObjectResult<SelectIgreNameSifra_Result> SelectIgreNameSifra(string naziv, string sifra)
        {
            var nazivParameter = naziv != null ?
                new ObjectParameter("Naziv", naziv) :
                new ObjectParameter("Naziv", typeof(string));
    
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectIgreNameSifra_Result>("SelectIgreNameSifra", nazivParameter, sifraParameter);
        }
    
        public virtual ObjectResult<SelectKupacByNarudzbaID_Result> SelectKupacByNarudzbaID(Nullable<int> narudbaID)
        {
            var narudbaIDParameter = narudbaID.HasValue ?
                new ObjectParameter("NarudbaID", narudbaID) :
                new ObjectParameter("NarudbaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectKupacByNarudzbaID_Result>("SelectKupacByNarudzbaID", narudbaIDParameter);
        }
    
        public virtual ObjectResult<SelectNarudzbaByID_Result> SelectNarudzbaByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectNarudzbaByID_Result>("SelectNarudzbaByID", iDParameter);
        }
    
        public virtual ObjectResult<SELECTNARUDZBABYKUPAC_Result> SELECTNARUDZBABYKUPAC(Nullable<int> kupacID)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTNARUDZBABYKUPAC_Result>("SELECTNARUDZBABYKUPAC", kupacIDParameter);
        }
    
        public virtual ObjectResult<Recenzije> SELECTRECENZIJABYID(Nullable<int> recenzijaID)
        {
            var recenzijaIDParameter = recenzijaID.HasValue ?
                new ObjectParameter("RecenzijaID", recenzijaID) :
                new ObjectParameter("RecenzijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Recenzije>("SELECTRECENZIJABYID", recenzijaIDParameter);
        }
    
        public virtual ObjectResult<Recenzije> SELECTRECENZIJABYID(Nullable<int> recenzijaID, MergeOption mergeOption)
        {
            var recenzijaIDParameter = recenzijaID.HasValue ?
                new ObjectParameter("RecenzijaID", recenzijaID) :
                new ObjectParameter("RecenzijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Recenzije>("SELECTRECENZIJABYID", mergeOption, recenzijaIDParameter);
        }
    
        public virtual ObjectResult<SELECTRECENZIJE_Result> SELECTRECENZIJE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTRECENZIJE_Result>("SELECTRECENZIJE");
        }
    
        public virtual ObjectResult<Zahtjevi> SELECTZAHTJEVBYID(Nullable<int> zahtjevID)
        {
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("ZahtjevID", zahtjevID) :
                new ObjectParameter("ZahtjevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Zahtjevi>("SELECTZAHTJEVBYID", zahtjevIDParameter);
        }
    
        public virtual ObjectResult<Zahtjevi> SELECTZAHTJEVBYID(Nullable<int> zahtjevID, MergeOption mergeOption)
        {
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("ZahtjevID", zahtjevID) :
                new ObjectParameter("ZahtjevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Zahtjevi>("SELECTZAHTJEVBYID", mergeOption, zahtjevIDParameter);
        }
    
        public virtual ObjectResult<SELECTZAHTJEVIBROJGLASOVA_Result> SELECTZAHTJEVIBROJGLASOVA(Nullable<int> zahtjevID)
        {
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("ZahtjevID", zahtjevID) :
                new ObjectParameter("ZahtjevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTZAHTJEVIBROJGLASOVA_Result>("SELECTZAHTJEVIBROJGLASOVA", zahtjevIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UlazRobeInsert(string brojFakture, Nullable<System.DateTime> datum, Nullable<decimal> iznosRacuna, Nullable<decimal> pDV, string napomena, Nullable<int> skladisteID, Nullable<int> korisnikID, Nullable<int> dobavljacID)
        {
            var brojFaktureParameter = brojFakture != null ?
                new ObjectParameter("BrojFakture", brojFakture) :
                new ObjectParameter("BrojFakture", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var iznosRacunaParameter = iznosRacuna.HasValue ?
                new ObjectParameter("IznosRacuna", iznosRacuna) :
                new ObjectParameter("IznosRacuna", typeof(decimal));
    
            var pDVParameter = pDV.HasValue ?
                new ObjectParameter("PDV", pDV) :
                new ObjectParameter("PDV", typeof(decimal));
    
            var napomenaParameter = napomena != null ?
                new ObjectParameter("Napomena", napomena) :
                new ObjectParameter("Napomena", typeof(string));
    
            var skladisteIDParameter = skladisteID.HasValue ?
                new ObjectParameter("SkladisteID", skladisteID) :
                new ObjectParameter("SkladisteID", typeof(int));
    
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var dobavljacIDParameter = dobavljacID.HasValue ?
                new ObjectParameter("DobavljacID", dobavljacID) :
                new ObjectParameter("DobavljacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UlazRobeInsert", brojFaktureParameter, datumParameter, iznosRacunaParameter, pDVParameter, napomenaParameter, skladisteIDParameter, korisnikIDParameter, dobavljacIDParameter);
        }
    
        public virtual int UlazStavkeInsert(Nullable<int> ulazID, Nullable<int> igradID, Nullable<int> kolicina, Nullable<decimal> cijena)
        {
            var ulazIDParameter = ulazID.HasValue ?
                new ObjectParameter("UlazID", ulazID) :
                new ObjectParameter("UlazID", typeof(int));
    
            var igradIDParameter = igradID.HasValue ?
                new ObjectParameter("IgradID", igradID) :
                new ObjectParameter("IgradID", typeof(int));
    
            var kolicinaParameter = kolicina.HasValue ?
                new ObjectParameter("Kolicina", kolicina) :
                new ObjectParameter("Kolicina", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UlazStavkeInsert", ulazIDParameter, igradIDParameter, kolicinaParameter, cijenaParameter);
        }
    
        public virtual ObjectResult<Uloge> UlogeALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("UlogeALL");
        }
    
        public virtual ObjectResult<Uloge> UlogeALL(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uloge>("UlogeALL", mergeOption);
        }
    
        public virtual int update_korisnik(Nullable<int> korisnikID, string korisnikIme, string korisnikPrezime, string korisnikTelefon, string korisnikEmail)
        {
            var korisnikIDParameter = korisnikID.HasValue ?
                new ObjectParameter("KorisnikID", korisnikID) :
                new ObjectParameter("KorisnikID", typeof(int));
    
            var korisnikImeParameter = korisnikIme != null ?
                new ObjectParameter("KorisnikIme", korisnikIme) :
                new ObjectParameter("KorisnikIme", typeof(string));
    
            var korisnikPrezimeParameter = korisnikPrezime != null ?
                new ObjectParameter("KorisnikPrezime", korisnikPrezime) :
                new ObjectParameter("KorisnikPrezime", typeof(string));
    
            var korisnikTelefonParameter = korisnikTelefon != null ?
                new ObjectParameter("KorisnikTelefon", korisnikTelefon) :
                new ObjectParameter("KorisnikTelefon", typeof(string));
    
            var korisnikEmailParameter = korisnikEmail != null ?
                new ObjectParameter("KorisnikEmail", korisnikEmail) :
                new ObjectParameter("KorisnikEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_korisnik", korisnikIDParameter, korisnikImeParameter, korisnikPrezimeParameter, korisnikTelefonParameter, korisnikEmailParameter);
        }
    
        public virtual int UpdateAukcija(Nullable<int> aukcijaID, Nullable<decimal> ponuda, Nullable<int> kupacID, Nullable<System.DateTime> datumPonude)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            var ponudaParameter = ponuda.HasValue ?
                new ObjectParameter("Ponuda", ponuda) :
                new ObjectParameter("Ponuda", typeof(decimal));
    
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var datumPonudeParameter = datumPonude.HasValue ?
                new ObjectParameter("DatumPonude", datumPonude) :
                new ObjectParameter("DatumPonude", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAukcija", aukcijaIDParameter, ponudaParameter, kupacIDParameter, datumPonudeParameter);
        }
    
        public virtual int UpdateRecenzije(Nullable<int> recenzijaID, string sadrzaj)
        {
            var recenzijaIDParameter = recenzijaID.HasValue ?
                new ObjectParameter("RecenzijaID", recenzijaID) :
                new ObjectParameter("RecenzijaID", typeof(int));
    
            var sadrzajParameter = sadrzaj != null ?
                new ObjectParameter("Sadrzaj", sadrzaj) :
                new ObjectParameter("Sadrzaj", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRecenzije", recenzijaIDParameter, sadrzajParameter);
        }
    
        public virtual int ZAHTJEVIINSERT(string naslov, Nullable<int> kupacID, Nullable<System.DateTime> datum)
        {
            var naslovParameter = naslov != null ?
                new ObjectParameter("Naslov", naslov) :
                new ObjectParameter("Naslov", typeof(string));
    
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZAHTJEVIINSERT", naslovParameter, kupacIDParameter, datumParameter);
        }
    
        public virtual int ZAHTJEVIKUPCIINSERT(Nullable<int> kupacID, Nullable<int> zahtjevID)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("ZahtjevID", zahtjevID) :
                new ObjectParameter("ZahtjevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZAHTJEVIKUPCIINSERT", kupacIDParameter, zahtjevIDParameter);
        }
    
        public virtual ObjectResult<ZAHTJEVIKUPCIPROVJERA_Result> ZAHTJEVIKUPCIPROVJERA(Nullable<int> kupacID, Nullable<int> zahtjevID)
        {
            var kupacIDParameter = kupacID.HasValue ?
                new ObjectParameter("KupacID", kupacID) :
                new ObjectParameter("KupacID", typeof(int));
    
            var zahtjevIDParameter = zahtjevID.HasValue ?
                new ObjectParameter("ZahtjevID", zahtjevID) :
                new ObjectParameter("ZahtjevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZAHTJEVIKUPCIPROVJERA_Result>("ZAHTJEVIKUPCIPROVJERA", kupacIDParameter, zahtjevIDParameter);
        }
    
        public virtual ObjectResult<ZAHTJEVINFO_Result> ZAHTJEVINFO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZAHTJEVINFO_Result>("ZAHTJEVINFO");
        }
    
        public virtual ObjectResult<ZahtjeviPretragaNaziv_Result> ZahtjeviPretragaNaziv(string naslov)
        {
            var naslovParameter = naslov != null ?
                new ObjectParameter("Naslov", naslov) :
                new ObjectParameter("Naslov", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZahtjeviPretragaNaziv_Result>("ZahtjeviPretragaNaziv", naslovParameter);
        }
    
        public virtual ObjectResult<AukcijeBYKupac_Result1> AukcijeBYKupac(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AukcijeBYKupac_Result1>("AukcijeBYKupac", iDParameter);
        }
    
        public virtual int UpdateNarudba(Nullable<int> iD, Nullable<bool> status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNarudba", iDParameter, statusParameter);
        }
    
        public virtual ObjectResult<IgreSifraIzvjestaj_Result> IgreSifraIzvjestaj(string sifra)
        {
            var sifraParameter = sifra != null ?
                new ObjectParameter("Sifra", sifra) :
                new ObjectParameter("Sifra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IgreSifraIzvjestaj_Result>("IgreSifraIzvjestaj", sifraParameter);
        }
    
        public virtual ObjectResult<IgreSelectByVrsta_Result> IgreSelectByVrsta(Nullable<int> vrstaID)
        {
            var vrstaIDParameter = vrstaID.HasValue ?
                new ObjectParameter("VrstaID", vrstaID) :
                new ObjectParameter("VrstaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IgreSelectByVrsta_Result>("IgreSelectByVrsta", vrstaIDParameter);
        }
    
        public virtual ObjectResult<ZahtjeviPoGlasovima_Result> ZahtjeviPoGlasovima(Nullable<int> glasovi)
        {
            var glasoviParameter = glasovi.HasValue ?
                new ObjectParameter("Glasovi", glasovi) :
                new ObjectParameter("Glasovi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZahtjeviPoGlasovima_Result>("ZahtjeviPoGlasovima", glasoviParameter);
        }
    
        public virtual ObjectResult<Izlazi> SelectIzlazi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Izlazi>("SelectIzlazi");
        }
    
        public virtual ObjectResult<Izlazi> SelectIzlazi(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Izlazi>("SelectIzlazi", mergeOption);
        }
    
        public virtual ObjectResult<RacunInfo_Result> RacunInfo(string brojRacuna)
        {
            var brojRacunaParameter = brojRacuna != null ?
                new ObjectParameter("BrojRacuna", brojRacuna) :
                new ObjectParameter("BrojRacuna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RacunInfo_Result>("RacunInfo", brojRacunaParameter);
        }
    
        public virtual ObjectResult<SelectAukcije1_Result> SelectAukcije1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAukcije1_Result>("SelectAukcije1");
        }
    
        public virtual ObjectResult<AukcijaPonuda> SelectAukcijaPonude(Nullable<int> aukcijaID)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AukcijaPonuda>("SelectAukcijaPonude", aukcijaIDParameter);
        }
    
        public virtual ObjectResult<AukcijaPonuda> SelectAukcijaPonude(Nullable<int> aukcijaID, MergeOption mergeOption)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AukcijaPonuda>("SelectAukcijaPonude", mergeOption, aukcijaIDParameter);
        }
    
        public virtual int UpdateIgre(Nullable<int> igraID)
        {
            var igraIDParameter = igraID.HasValue ?
                new ObjectParameter("IgraID", igraID) :
                new ObjectParameter("IgraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIgre", igraIDParameter);
        }
    
        public virtual ObjectResult<SELECTALLAUKCIJE_Result> SELECTALLAUKCIJE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTALLAUKCIJE_Result>("SELECTALLAUKCIJE");
        }
    
        public virtual ObjectResult<AukcijaPonudeInfo_Result> AukcijaPonudeInfo(Nullable<int> aukcijaID)
        {
            var aukcijaIDParameter = aukcijaID.HasValue ?
                new ObjectParameter("AukcijaID", aukcijaID) :
                new ObjectParameter("AukcijaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AukcijaPonudeInfo_Result>("AukcijaPonudeInfo", aukcijaIDParameter);
        }
    
        public virtual ObjectResult<KUPACVRIJEDNOSTBYID_Result> KUPACVRIJEDNOSTBYID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KUPACVRIJEDNOSTBYID_Result>("KUPACVRIJEDNOSTBYID", iDParameter);
        }
    }
}
